{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loftonj\\\\Desktop\\\\FEND\\\\newfrontend\\\\frontend\\\\src\\\\components\\\\pages\\\\PSNTextBoxComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PSNTextBoxComponent = () => {\n  _s();\n  const [playstationID, setPlaystationID] = useState('');\n  const [trophies, setTrophies] = useState([]);\n  const history = useHistory();\n  const handleInputChange = e => {\n    setPlaystationID(e.target.value);\n  };\n  const fetchTrophies = async () => {\n    if (!playstationID) {\n      console.log(\"Playstation ID is empty.\");\n      return;\n    }\n    console.log(\"Fetching trophies for username:\", playstationID);\n    try {\n      const response = await axios.get(`http://localhost:3001/psn/trophies/${playstationID}`);\n      console.log(\"Response data:\", response.data);\n      // Check if response data is an array and update state accordingly\n      if (Array.isArray(response.data)) {\n        setTrophies(response.data);\n        history.push('/playstationlogin', {\n          trophies: response.data\n        });\n      } else {\n        console.error(\"Unexpected response format:\", response.data);\n      }\n    } catch (error) {\n      console.error(\"Error fetching trophies:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: playstationID,\n      onChange: handleInputChange,\n      placeholder: \"Enter Playstation ID\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchTrophies,\n      children: \"Get Trophies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [trophies.length > 0 ? trophies.map(userTrophy => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [userTrophy.gameName, \" (Platform: \", userTrophy.platform, \")\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), userTrophy.trophies && userTrophy.trophies.length > 0 ? userTrophy.trophies.filter(trophy => trophy.earned) // Filter to show only earned trophies\n          .map(trophy => /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: trophy.trophyName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Type: \", trophy.trophyType]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Rarity: \", trophy.trophyRare]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 23\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [\"Earned: \", trophy.earned ? 'Yes' : 'No']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 23\n            }, this)]\n          }, trophy._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 21\n          }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"No trophies found for this game.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 17\n          }, this)]\n        }, userTrophy._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(PSNTextBoxComponent, \"tUKNi2+sjeh1AZxUmUeiwAnmrkA=\", false, function () {\n  return [useHistory];\n});\n_c = PSNTextBoxComponent;\nexport default PSNTextBoxComponent;\nvar _c;\n$RefreshReg$(_c, \"PSNTextBoxComponent\");","map":{"version":3,"names":["React","useState","axios","useHistory","jsxDEV","_jsxDEV","PSNTextBoxComponent","_s","playstationID","setPlaystationID","trophies","setTrophies","history","handleInputChange","e","target","value","fetchTrophies","console","log","response","get","data","Array","isArray","push","error","children","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","userTrophy","gameName","platform","filter","trophy","earned","trophyName","trophyType","trophyRare","_id","_c","$RefreshReg$"],"sources":["C:/Users/loftonj/Desktop/FEND/newfrontend/frontend/src/components/pages/PSNTextBoxComponent.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst PSNTextBoxComponent = () => {\r\n  const [playstationID, setPlaystationID] = useState('');\r\n  const [trophies, setTrophies] = useState([]);\r\n  const history = useHistory();\r\n\r\n  const handleInputChange = (e) => {\r\n    setPlaystationID(e.target.value);\r\n  };\r\n\r\n  const fetchTrophies = async () => {\r\n    if (!playstationID) {\r\n      console.log(\"Playstation ID is empty.\");\r\n      return;\r\n    }\r\n    \r\n    console.log(\"Fetching trophies for username:\", playstationID);\r\n    try {\r\n      const response = await axios.get(`http://localhost:3001/psn/trophies/${playstationID}`);\r\n      console.log(\"Response data:\", response.data);\r\n      // Check if response data is an array and update state accordingly\r\n      if (Array.isArray(response.data)) {\r\n        setTrophies(response.data);\r\n        history.push('/playstationlogin', { trophies: response.data });\r\n      } else {\r\n        console.error(\"Unexpected response format:\", response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching trophies:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={playstationID}\r\n        onChange={handleInputChange}\r\n        placeholder=\"Enter Playstation ID\"\r\n      />\r\n      <button onClick={fetchTrophies}>Get Trophies</button>\r\n      <div>\r\n        <ul>\r\n        {trophies.length > 0 ? (\r\n          trophies.map((userTrophy) => (\r\n            <li key={userTrophy._id}>\r\n              <h2>{userTrophy.gameName} (Platform: {userTrophy.platform})</h2>\r\n              {userTrophy.trophies && userTrophy.trophies.length > 0 ? (\r\n                userTrophy.trophies\r\n                  .filter((trophy) => trophy.earned) // Filter to show only earned trophies\r\n                  .map((trophy) => (\r\n                    <div key={trophy._id}>\r\n                      <h3>{trophy.trophyName}</h3>\r\n                      <p>Type: {trophy.trophyType}</p>\r\n                      <p>Rarity: {trophy.trophyRare}</p>\r\n                      <p>Earned: {trophy.earned ? 'Yes' : 'No'}</p>\r\n                    </div>\r\n                  ))\r\n              ) : (\r\n                <p>No trophies found for this game.</p>\r\n              )}\r\n            </li>\r\n          )) \r\n        ) : ( \r\n          <p></p>\r\n        )} </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PSNTextBoxComponent;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}