{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\loftonj\\\\Desktop\\\\FEND\\\\new frontend\\\\frontend\\\\src\\\\components\\\\pages\\\\SteamTextBoxComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport { useHistory } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SteamTextBoxComponent = () => {\n  _s();\n  const [steamId, setSteamId] = useState('');\n  const [achievements, setAchievements] = useState([]);\n  const history = useHistory();\n  const handleInputChange = e => {\n    setSteamId(e.target.value);\n  };\n  const fetchAchievements = async () => {\n    console.log(\"Fetching achievements for Steam ID:\", steamId);\n    try {\n      const response = await axios.get(`http://localhost:3001/steam/games/${steamId}`);\n      console.log(\"Response data:\", response.data);\n      setAchievements(response.data);\n      history.push('/steamlogin', {\n        achievements: response.data\n      });\n    } catch (error) {\n      console.error(\"Error fetching achievements:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: steamId,\n      onChange: handleInputChange,\n      placeholder: \"Enter Steam Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: fetchAchievements,\n      children: \"Get Trophies\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: achievements.map(userAchievement => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"App ID: \", userAchievement.gameName]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this), userAchievement.achievements && userAchievement.achievements.length > 0 ? userAchievement.achievements.filter(achievement => achievement.achieved) // Filter to show only achieved achievements\n        .map(achievement => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: achievement.apiname\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Achieved: \", achievement.achieved ? 'Yes' : 'No']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 21\n          }, this)]\n        }, achievement.apiname, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 19\n        }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No achievements found for this app.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 15\n        }, this)]\n      }, userAchievement._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(SteamTextBoxComponent, \"GEwueK6Caqro1JTDGPLyblZxniY=\", false, function () {\n  return [useHistory];\n});\n_c = SteamTextBoxComponent;\nexport default SteamTextBoxComponent;\nvar _c;\n$RefreshReg$(_c, \"SteamTextBoxComponent\");","map":{"version":3,"names":["React","useState","axios","useHistory","jsxDEV","_jsxDEV","SteamTextBoxComponent","_s","steamId","setSteamId","achievements","setAchievements","history","handleInputChange","e","target","value","fetchAchievements","console","log","response","get","data","push","error","children","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","userAchievement","gameName","length","filter","achievement","achieved","apiname","_id","_c","$RefreshReg$"],"sources":["C:/Users/loftonj/Desktop/FEND/new frontend/frontend/src/components/pages/SteamTextBoxComponent.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nconst SteamTextBoxComponent = () => {\r\n  const [steamId, setSteamId] = useState('');\r\n  const [achievements, setAchievements] = useState([]);\r\n  const history = useHistory();\r\n\r\n  const handleInputChange = (e) => {\r\n    setSteamId(e.target.value);\r\n  };\r\n\r\n  const fetchAchievements = async () => {\r\n    console.log(\"Fetching achievements for Steam ID:\", steamId);\r\n    try {\r\n      const response = await axios.get(`http://localhost:3001/steam/games/${steamId}`);\r\n      console.log(\"Response data:\", response.data);\r\n      setAchievements(response.data);\r\n      history.push('/steamlogin', { achievements: response.data });\r\n    } catch (error) {\r\n      console.error(\"Error fetching achievements:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"text\"\r\n        value={steamId}\r\n        onChange={handleInputChange}\r\n        placeholder=\"Enter Steam Code\"\r\n      />\r\n      <button onClick={fetchAchievements}>Get Trophies</button>\r\n      <div>\r\n        {achievements.map((userAchievement) => (\r\n          <div key={userAchievement._id}>\r\n            <h2>App ID: {userAchievement.gameName}</h2>\r\n            {userAchievement.achievements && userAchievement.achievements.length > 0 ? (\r\n              userAchievement.achievements\r\n                .filter((achievement) => achievement.achieved) // Filter to show only achieved achievements\r\n                .map((achievement) => (\r\n                  <div key={achievement.apiname}>\r\n                    <h3>{achievement.apiname}</h3>\r\n                    <p>Achieved: {achievement.achieved ? 'Yes' : 'No'}</p>\r\n                  </div>\r\n                ))\r\n            ) : (\r\n              <p>No achievements found for this app.</p>\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SteamTextBoxComponent;\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}